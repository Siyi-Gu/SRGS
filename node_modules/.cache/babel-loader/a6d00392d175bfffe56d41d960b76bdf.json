{"ast":null,"code":"import _objectSpread from \"/home/sigu3507/dialogue/SRGS-lab4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\"; // SRGS parser and example (logs the results to console on page load)\n\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar } from './grammars/intelligentGrammar';\nconst gram = loadGrammar(grammar); //const input = \"I would like a coca cola and three large pizzas with pepperoni and mushrooms\"\n//const prs = parse(input.split(/\\s+/), gram)\n//const result = prs.resultsForRule(gram.$root)[0]\n//console.log(result)\n\nfunction parsing(text) {\n  return parse(text.split(/\\s+/), gram).resultsForRule(gram.$root)[0];\n}\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: 'confirm',\n          actions: assign(context => {\n            return {\n              smarthome: parsing(context.recResult)\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"What can I do for you?\")),\n    confirm: {\n      initial: 'prompt',\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.smarthome.action, \" \").concat(context.smarthome.object, \".\")\n          }))\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/home/sigu3507/dialogue/SRGS-lab4/src/dmSmartHome.ts"],"names":["send","assign","loadGrammar","parse","grammar","gram","parsing","text","split","resultsForRule","$root","say","_context","type","value","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","dmMachine","init","CLICK","welcome","RECOGNISED","target","actions","context","smarthome","recResult","confirm","action","object"],"mappings":";AAAA,SAAwBA,IAAxB,EAAsCC,MAAtC,QAAoD,QAApD,C,CAEA;;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,OAAT,QAAwB,+BAAxB;AAGA,MAAMC,IAAI,GAAGH,WAAW,CAACE,OAAD,CAAxB,C,CACA;AACA;AACA;AAEA;;AAEA,SAASE,OAAT,CAAiBC,IAAjB,EAAwE;AACpE,SAAQJ,KAAK,CAACI,IAAI,CAACC,KAAL,CAAW,KAAX,CAAD,EAAoBH,IAApB,CAAL,CAA+BI,cAA/B,CAA8CJ,IAAI,CAACK,KAAnD,EAA0D,CAA1D,CAAR;AACH;;AAED,SAASC,GAAT,CAAaJ,IAAb,EAAyD;AACrD,SAAOP,IAAI,CAAEY,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEP;AAAxB,GAA3B,CAAD,CAAX;AACH;;AAED,SAASQ,YAAT,CAAsBC,MAAtB,EAAgF;AAC5E,SAAQ;AACJC,IAAAA,OAAO,EAAE,QADL;AAEJC,IAAAA,MAAM,EAAE;AACJF,MAAAA,MAAM,EAAE;AACJG,QAAAA,KAAK,EAAER,GAAG,CAACK,MAAD,CADN;AAEJI,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAFA,OADJ;AAKJC,MAAAA,GAAG,EAAE;AACDH,QAAAA,KAAK,EAAEnB,IAAI,CAAC,QAAD;AADV;AALD;AAFJ,GAAR;AAYH;;AAGD,OAAO,MAAMuB,SAAmD,GAAI;AAChEN,EAAAA,OAAO,EAAE,MADuD;AAEhEC,EAAAA,MAAM,EAAE;AACJM,IAAAA,IAAI,EAAE;AACFJ,MAAAA,EAAE,EAAE;AACAK,QAAAA,KAAK,EAAE;AADP;AADF,KADF;AAMJC,IAAAA,OAAO;AACHT,MAAAA,OAAO,EAAE,QADN;AAEHG,MAAAA,EAAE,EAAE;AACAO,QAAAA,UAAU,EAAE;AACNC,UAAAA,MAAM,EAAE,SADF;AAENC,UAAAA,OAAO,EAAE5B,MAAM,CAAE6B,OAAD,IAAa;AAAE,mBAAO;AAAEC,cAAAA,SAAS,EAAEzB,OAAO,CAACwB,OAAO,CAACE,SAAT;AAApB,aAAP;AAAkD,WAAlE;AAFT;AADZ;AAFD,OAQAjB,YAAY,CAAC,wBAAD,CARZ,CANH;AAgBJkB,IAAAA,OAAO,EAAE;AACLhB,MAAAA,OAAO,EAAE,QADJ;AAELC,MAAAA,MAAM,EAAE;AACJF,QAAAA,MAAM,EAAE;AACJG,UAAAA,KAAK,EAAEnB,IAAI,CAAE8B,OAAD,KAAc;AACtBjB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,gBAASgB,OAAO,CAACC,SAAR,CAAkBG,MAA3B,cAAqCJ,OAAO,CAACC,SAAR,CAAkBI,MAAvD;AAFiB,WAAd,CAAD;AADP;AADJ;AAFH;AAhBL;AAFwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n// SRGS parser and example (logs the results to console on page load)\nimport { loadGrammar } from './runparser'\nimport { parse } from './chartparser'\nimport { grammar } from './grammars/intelligentGrammar'\n\n\nconst gram = loadGrammar(grammar)\n//const input = \"I would like a coca cola and three large pizzas with pepperoni and mushrooms\"\n//const prs = parse(input.split(/\\s+/), gram)\n//const result = prs.resultsForRule(gram.$root)[0]\n\n//console.log(result)\n\nfunction parsing(text:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return (parse(text.split(/\\s+/), gram).resultsForRule(gram.$root)[0])\n}\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n        }\n    })\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: {\n                      target: 'confirm',\n                      actions: assign((context) => { return { smarthome: parsing(context.recResult) } }),\n                }\n            },\n            ...promptAndAsk(\"What can I do for you?\")\n        },\n        confirm: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.smarthome.action} ${context.smarthome.object}.`\n                    }))\n                },\n            }\n        }\n    }\n})\n"]},"metadata":{},"sourceType":"module"}